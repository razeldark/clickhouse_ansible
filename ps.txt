Import-Module ActiveDirectory
import-module 'D:\Exchange Server\Bin\RemoteExchange.ps1' # не нужно, если запускать через консоль exchange
Connect-ExchangeServer -auto -ClientApplication:ManagementShell # не нужно, если запускать через консоль exchange
#$mails = Get-ADGroupMember -Identity "Филиал Сибирь" -Recursive #добавить по группе
$mails = Get-ADUser -SearchBase DC=corp,DC=cristanval,DC=com -Filter * -ResultSetSize Unlimited | Select Name,SamAccountName,Mail # все пользователи в ou
$m = Format-List -InputObject $mails | Out-String # преобразует список в читаемый вид
foreach ($i in $m) {Write-Host $i}
foreach ($i in $m) {Disable-Mailbox $i}

foreach ($i in $a) {Write-Host $i}
import-csv t.txt -Delimiter ":" -Header @("a","b") | select @{Name="b";Expression={[int32]$_.b}} | Sort-Object b



Get-ADUser -Filter {EmailAddress -like "*"} -Properties EmailAddress | select emailaddress

New-MailboxRestoreRequest -Name $i -SourceDatabase RecEX1_DB0 -SourceStoreMailbox $i -TargetMailbox $i -AllowLegacyDN


Get-ADUser -SearchBase "OU=Ћперационный департамент Ћбъекты инфраструктуры,OU=Users,OU=Corp,DC=corp,DC=cristanval,DC=com" -Filter {manager -eq $OldManager} -ResultSetSize 5000 | Select Name,SamAccountName,Manager

Get-ADGroupMember 'Менеджеры' | foreach {Get-ADUser $_ -Properties *} | Fromat-Table displayname, SamAccountName, mail
Get-DistributionGroupMember -identity "Менеджеры" | ft name, primarysmtpaddress | clip


get-aduser -Filter {manager -eq $O} -Properties Manager | select -ExpandProperty samaccountname | foreach { set-aduser -Identity $_ -manager $NewManager } 

новосиб зухель поменЯть 22 порт

ssh-keygen -f ~/.ssh/id_rsa.pub -m 'PEM' -e > public.pem
chmod 600 public.pem

[Console]::OutputEncoding = [System.Text.Encoding]::UTF8


Import-Module ActiveDirectory
import-module 'C:\Program Files\Microsoft\Exchange Server\V15\Bin\RemoteExchange.ps1' # не нужно, если запускать через консоль exchange
Connect-ExchangeServer -auto -ClientApplication:ManagementShell


$email2 = Get-Content -Path 'C:\root\email2.csv'
foreach ($i in $email2){
    Write-Host $i
    $fullpath = "\\fs03\share\pst\"+$i+".pst"
    New-MailboxExportRequest -Mailbox $i -ContentFilter {(Received -lt "01/01/2018")} -FilePath $fullpath

}



#'ообщаем, что это за скрипт и предлагаем продолжить
Write-Host ""даление неиспользуемых файлов старше 30 дней и очистка от пустых папок"
Read-Host ""лЯ продолжениЯ нажмите Enter"
#+адаЮм дату удалениЯ
$DelDays = (Get-Date).AddDays(-30)
#Папка назначениЯ
$targetpath = "C:\Personal\"

$filename = $targetpath+(Get-Date | ForEach-Object { $_ -replace ":", "." }) + '.log'

#"далЯем файлы в папке назначениЯ согласно дате удалениЯ
$files = Get-ChildItem -Path $targetpath -Recurse -Force | Where-Object { !$_.PSIsContainer  -and $_.LastWriteTime -lt $DelDays } #| Remove-Item -Force -Verbose 4>&1 | Set-Content $filename
Set-Content $filename -value 'LOG'
foreach ($i in $files){
    Add-Content $filename -Value (Get-Date | ForEach-Object { $_ -replace ":", "." }), $i
    Remove-Item $i.FullName -Force 
}
#"далЯем все пустые папки в назначенной директории
Get-ChildItem -Path $targetpath -Recurse -Force | Where-Object { $_.PSIsContainer -and (Get-ChildItem -Path $_.FullName -Recurse -Force | Where-Object { !$_.PSIsContainer }) -eq $null } | Remove-Item -Force -Recurse -Verbose 4>&1 | Add-Content 'C:\Personal\result.log'
#'ообщаем о заверешении и предлагаем выйти из среды обработки
Write-Host "`n"даление и очистка завершены"
#Read-Host ""лЯ выхода нажмите Enter"